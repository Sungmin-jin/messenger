#!/usr/bin/env node

/* Sets up the environment variables from your .env file*/
require("dotenv").config();

/**
 * Module dependencies.
 */

const { app, sessionStore } = require("../app");
const http = require("http");
const db = require("../db");
const onlineUsers = require("../onlineUsers");
const jwt = require("jsonwebtoken");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3001");
app.set("port", port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces, and sync database.
 */

const io = require("socket.io")(server, {
  cors: {
    origin: "http://localhost:3000",
  },
});

//middleware check if user is a valid or not
io.use((socket, next) => {
  if (socket.handshake.auth?.token) {
    jwt.verify(
      socket.handshake.auth.token,
      process.env.SESSION_SECRET,
      (err, decoded) => {
        if (err) {
          return next(new Error("Invalid credentials"));
        }
        socket.userId = decoded.id;
        return next();
      }
    );
  }
  next(new Error("Invalid credentials"));
});

io.on("connection", (socket) => {
  socket.on("go-online", () => {
    const id = socket.userId;
    //check if any of the user is online
    if (!onlineUsers[id]) {
      onlineUsers[id] = [socket.id];
      //if a user is online and login with different device add the user into the array
    } else if (onlineUsers[id] && !onlineUsers[id].includes(socket.id)) {
      onlineUsers[id] = [...onlineUsers[id], socket.id];
    }
    // send the user who just went online to everyone else who is already online
    socket.broadcast.emit("add-online-user", id);
  });

  socket.on("new-message", (data) => {
    const id = socket.userId;
    const { message, sender, recipientId } = data;
    const myOtherDevices = onlineUsers[id].filter(
      (socketId) => socketId != socket.id
    );

    //send a message to every device that recipient has
    if (onlineUsers[recipientId]) {
      for (const users of onlineUsers[recipientId]) {
        socket.to(users).emit("new-message", {
          message: message,
          sender: sender,
          fromOtherUser: true,
        });
      }
    }

    //send a message to my other devices
    if (myOtherDevices !== 0) {
      for (const myDevice of myOtherDevices) {
        socket.to(myDevice).emit("new-message", {
          message: message,
          sneder: sender,
          fromOtherUser: false,
        });
      }
    }
  });

  socket.on("logout", () => {
    const id = socket.userId;
    if (onlineUsers[id]) {
      onlineUsers[id] = onlineUsers[id].filter(
        (socketId) => socketId != socket.id
      );
      if (onlineUsers[id].length === 0) {
        delete onlineUsers[id];
        socket.broadcast.emit("remove-offline-user", id);
      }
    }
  });

  socket.on("read-chats", (data) => {
    const { conversationId, readerId, recipientId } = data;
    if (onlineUsers[recipientId]) {
      for (const users of onlineUsers[recipientId]) {
        socket.to(users).emit("read-chats", { conversationId, readerId });
      }
    }
  });
});

sessionStore
  .sync()
  .then(() => db.sync())
  .then(() => {
    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;

  console.log("Listening on " + bind);
}
